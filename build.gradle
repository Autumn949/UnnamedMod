buildscript {
    repositories {
        maven { url 'https://files.minecraftforge.net/maven' }
        maven { url 'https://dist.creeper.host/Sponge/maven' }
        maven { url 'https://maven.shadew.net/' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'

        classpath 'net.shadew.modutil:shade:1.0.2'
        classpath 'net.shadew.modutil:inject-constants:1.0.2'
        classpath 'net.shadew.modutil:changelog:1.0.2'
    }

}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'net.shadew.modutil.shade'
apply plugin: 'net.shadew.modutil.inject-constants'
apply plugin: 'net.shadew.modutil.changelog'
apply plugin: 'idea'
apply plugin: 'maven-publish'

def mod = [
    id     : findProperty("mod.id"),
    version: findProperty("mod.version"),
    group  : findProperty("mod.group"),
    root   : findProperty("mod.root")
]

def env = [
    mappingsChannel : findProperty("env.mappings.channel"),
    mappingsVersion : findProperty("env.mappings.version"),
    minecraftVersion: findProperty("env.minecraft.version"),
    forgeVersion    : findProperty("env.forge.version"),
    utilVersion     : findProperty("env.util.version"),
    buildTimestamp  : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
]

version = "$mod.version"
group = "$mod.group"
archivesBaseName = "$mod.id"

sourceCompatibility = targetCompatibility = '1.8'
compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'


shading {
    shade('net.shadew.util', "${mod.root}.internal.net.shadew.util")
}

constants {
    annotation "${mod.root}.EnvConstant"
    pattern(/.*\.(json|toml|mcmeta)$/, /@env\{([a-zA-Z0-9.\-_$]+)\}/)

    constantsFromProperties()
}

changelog {
    updateJson file("$projectDir/versioninfo/update.json")
    markdownChangelog file("$projectDir/versioninfo/changelog.md")

    changelogJson file("$projectDir/changelog.json")
}


minecraft {
    mappings channel: "${env.mappingsChannel}",
             version: "${env.mappingsVersion}"

    runs {
        client {
            workingDirectory file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'

            mods {
                maybeCreate("${mod.id}").source((SourceSet) sourceSets.main)
            }
        }

        server {
            workingDirectory file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'

            mods {
                maybeCreate("${mod.id}").source((SourceSet) sourceSets.main)
            }
        }

        data {
            workingDirectory file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'

            args '--mod', mod.id + '', '--all',
                 '--output', file('src/generated/resources/'),
                 '--existing', file('src/main/resources/')

            mods {
                maybeCreate("${mod.id}").source((SourceSet) sourceSets.main)
            }
        }
    }
}

mixin {
    add sourceSets.main, "${mod.id}.refmap.json"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = "Shadew's Maven"
        url = "http://maven.shadew.net/"
    }
    maven {
        name = "tterrag's maven"
        url = "https://maven.tterrag.com/"
    }
}

configurations {
    embed // External deps embedded into the JAR file
    compile.extendsFrom(embed)
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

dependencies {
    minecraft "net.minecraftforge:forge:${env.minecraftVersion}-${env.forgeVersion}"
    embed("net.shadew:shwutil:${env.utilVersion}") {
        transitive false
    }
}

jar {
    doFirst {
        // Include necessary dependencies
        from configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
    }

    manifest {
        attributes([
            "Specification-Title"     : "${mod.id}",
            "Specification-Vendor"    : "${mod.group}",
            "Specification-Version"   : "1",
            "Implementation-Title"    : "${mod.id}",
            "Implementation-Vendor"   : "${mod.group}",
            "Implementation-Version"  : "${mod.version}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConnector"          : "${mod.root}.core.MixinConnector"
        ]
        )
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
